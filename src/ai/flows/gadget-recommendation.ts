// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A gadget recommendation AI agent.
 *
 * - gadgetRecommendation - A function that handles the gadget recommendation process.
 * - GadgetInput - The input type for the gadgetRecommendation function.
 * - GadgetOutput - The return type for the gadgetRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GadgetInputSchema = z.object({
  petType: z.enum(['dog', 'cat', 'rodent', 'bird']).describe('The type of pet.'),
  petPersonality: z.string().describe('A description of the pet’s personality and habits.'),
  productCatalog: z.string().describe('A list of available products, each with a name and description.'),
});
export type GadgetInput = z.infer<typeof GadgetInputSchema>;

const GadgetOutputSchema = z.object({
  gadgetRecommendations: z.array(
    z.object({
      productName: z.string().describe('The name of the recommended product.'),
      reasoning: z.string().describe('The reasoning for recommending this product based on the pet’s personality and habits.'),
    })
  ).describe('A list of gadget recommendations with reasoning.'),
});
export type GadgetOutput = z.infer<typeof GadgetOutputSchema>;

export async function gadgetRecommendation(input: GadgetInput): Promise<GadgetOutput> {
  return gadgetRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'gadgetRecommendationPrompt',
  input: {schema: GadgetInputSchema},
  output: {schema: GadgetOutputSchema},
  prompt: `You are an AI gadget recommendation expert for pets.

  Based on the pet's type, personality, habits, and the available product catalog, provide personalized gadget recommendations.
  Explain the reasoning behind each recommendation, highlighting how it aligns with the pet's characteristics.

  Pet Type: {{{petType}}}
  Pet Personality and Habits: {{{petPersonality}}}
  Product Catalog: {{{productCatalog}}}
  `,
});

const gadgetRecommendationFlow = ai.defineFlow(
  {
    name: 'gadgetRecommendationFlow',
    inputSchema: GadgetInputSchema,
    outputSchema: GadgetOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
